# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import libpyselinux
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


is_selinux_enabled = libpyselinux.is_selinux_enabled
is_selinux_mls_enabled = libpyselinux.is_selinux_mls_enabled
getcon = libpyselinux.getcon
getcon_raw = libpyselinux.getcon_raw
setcon = libpyselinux.setcon
setcon_raw = libpyselinux.setcon_raw
getpidcon = libpyselinux.getpidcon
getpidcon_raw = libpyselinux.getpidcon_raw
getprevcon = libpyselinux.getprevcon
getprevcon_raw = libpyselinux.getprevcon_raw
getexeccon = libpyselinux.getexeccon
getexeccon_raw = libpyselinux.getexeccon_raw
setexeccon = libpyselinux.setexeccon
setexeccon_raw = libpyselinux.setexeccon_raw
getfscreatecon = libpyselinux.getfscreatecon
getfscreatecon_raw = libpyselinux.getfscreatecon_raw
setfscreatecon = libpyselinux.setfscreatecon
setfscreatecon_raw = libpyselinux.setfscreatecon_raw
getkeycreatecon = libpyselinux.getkeycreatecon
getkeycreatecon_raw = libpyselinux.getkeycreatecon_raw
setkeycreatecon = libpyselinux.setkeycreatecon
setkeycreatecon_raw = libpyselinux.setkeycreatecon_raw
getsockcreatecon = libpyselinux.getsockcreatecon
getsockcreatecon_raw = libpyselinux.getsockcreatecon_raw
setsockcreatecon = libpyselinux.setsockcreatecon
setsockcreatecon_raw = libpyselinux.setsockcreatecon_raw
getfilecon = libpyselinux.getfilecon
getfilecon_raw = libpyselinux.getfilecon_raw
lgetfilecon = libpyselinux.lgetfilecon
lgetfilecon_raw = libpyselinux.lgetfilecon_raw
fgetfilecon = libpyselinux.fgetfilecon
fgetfilecon_raw = libpyselinux.fgetfilecon_raw
setfilecon = libpyselinux.setfilecon
setfilecon_raw = libpyselinux.setfilecon_raw
lsetfilecon = libpyselinux.lsetfilecon
lsetfilecon_raw = libpyselinux.lsetfilecon_raw
fsetfilecon = libpyselinux.fsetfilecon
fsetfilecon_raw = libpyselinux.fsetfilecon_raw
getpeercon = libpyselinux.getpeercon
getpeercon_raw = libpyselinux.getpeercon_raw
class av_decision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, av_decision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, av_decision, name)
    __repr__ = _swig_repr
    __swig_setmethods__["allowed"] = libpyselinux.av_decision_allowed_set
    __swig_getmethods__["allowed"] = libpyselinux.av_decision_allowed_get
    if _newclass:allowed = _swig_property(libpyselinux.av_decision_allowed_get, libpyselinux.av_decision_allowed_set)
    __swig_setmethods__["decided"] = libpyselinux.av_decision_decided_set
    __swig_getmethods__["decided"] = libpyselinux.av_decision_decided_get
    if _newclass:decided = _swig_property(libpyselinux.av_decision_decided_get, libpyselinux.av_decision_decided_set)
    __swig_setmethods__["auditallow"] = libpyselinux.av_decision_auditallow_set
    __swig_getmethods__["auditallow"] = libpyselinux.av_decision_auditallow_get
    if _newclass:auditallow = _swig_property(libpyselinux.av_decision_auditallow_get, libpyselinux.av_decision_auditallow_set)
    __swig_setmethods__["auditdeny"] = libpyselinux.av_decision_auditdeny_set
    __swig_getmethods__["auditdeny"] = libpyselinux.av_decision_auditdeny_get
    if _newclass:auditdeny = _swig_property(libpyselinux.av_decision_auditdeny_get, libpyselinux.av_decision_auditdeny_set)
    __swig_setmethods__["seqno"] = libpyselinux.av_decision_seqno_set
    __swig_getmethods__["seqno"] = libpyselinux.av_decision_seqno_get
    if _newclass:seqno = _swig_property(libpyselinux.av_decision_seqno_get, libpyselinux.av_decision_seqno_set)
    def __init__(self, *args): 
        this = libpyselinux.new_av_decision(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_av_decision
    __del__ = lambda self : None;
av_decision_swigregister = libpyselinux.av_decision_swigregister
av_decision_swigregister(av_decision)

class selinux_opt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, selinux_opt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, selinux_opt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = libpyselinux.selinux_opt_type_set
    __swig_getmethods__["type"] = libpyselinux.selinux_opt_type_get
    if _newclass:type = _swig_property(libpyselinux.selinux_opt_type_get, libpyselinux.selinux_opt_type_set)
    __swig_setmethods__["value"] = libpyselinux.selinux_opt_value_set
    __swig_getmethods__["value"] = libpyselinux.selinux_opt_value_get
    if _newclass:value = _swig_property(libpyselinux.selinux_opt_value_get, libpyselinux.selinux_opt_value_set)
    def __init__(self, *args): 
        this = libpyselinux.new_selinux_opt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_selinux_opt
    __del__ = lambda self : None;
selinux_opt_swigregister = libpyselinux.selinux_opt_swigregister
selinux_opt_swigregister(selinux_opt)

class selinux_callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, selinux_callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, selinux_callback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func_log"] = libpyselinux.selinux_callback_func_log_set
    __swig_getmethods__["func_log"] = libpyselinux.selinux_callback_func_log_get
    if _newclass:func_log = _swig_property(libpyselinux.selinux_callback_func_log_get, libpyselinux.selinux_callback_func_log_set)
    __swig_setmethods__["func_audit"] = libpyselinux.selinux_callback_func_audit_set
    __swig_getmethods__["func_audit"] = libpyselinux.selinux_callback_func_audit_get
    if _newclass:func_audit = _swig_property(libpyselinux.selinux_callback_func_audit_get, libpyselinux.selinux_callback_func_audit_set)
    __swig_setmethods__["func_validate"] = libpyselinux.selinux_callback_func_validate_set
    __swig_getmethods__["func_validate"] = libpyselinux.selinux_callback_func_validate_get
    if _newclass:func_validate = _swig_property(libpyselinux.selinux_callback_func_validate_get, libpyselinux.selinux_callback_func_validate_set)
    def __init__(self, *args): 
        this = libpyselinux.new_selinux_callback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_selinux_callback
    __del__ = lambda self : None;
selinux_callback_swigregister = libpyselinux.selinux_callback_swigregister
selinux_callback_swigregister(selinux_callback)

SELINUX_CB_LOG = libpyselinux.SELINUX_CB_LOG
SELINUX_CB_AUDIT = libpyselinux.SELINUX_CB_AUDIT
SELINUX_CB_VALIDATE = libpyselinux.SELINUX_CB_VALIDATE
selinux_get_callback = libpyselinux.selinux_get_callback
selinux_set_callback = libpyselinux.selinux_set_callback
SELINUX_ERROR = libpyselinux.SELINUX_ERROR
SELINUX_WARNING = libpyselinux.SELINUX_WARNING
SELINUX_INFO = libpyselinux.SELINUX_INFO
SELINUX_AVC = libpyselinux.SELINUX_AVC
security_compute_av = libpyselinux.security_compute_av
security_compute_av_raw = libpyselinux.security_compute_av_raw
security_compute_create = libpyselinux.security_compute_create
security_compute_create_raw = libpyselinux.security_compute_create_raw
security_compute_relabel = libpyselinux.security_compute_relabel
security_compute_relabel_raw = libpyselinux.security_compute_relabel_raw
security_compute_member = libpyselinux.security_compute_member
security_compute_member_raw = libpyselinux.security_compute_member_raw
security_compute_user = libpyselinux.security_compute_user
security_compute_user_raw = libpyselinux.security_compute_user_raw
security_load_policy = libpyselinux.security_load_policy
security_get_initial_context = libpyselinux.security_get_initial_context
security_get_initial_context_raw = libpyselinux.security_get_initial_context_raw
selinux_mkload_policy = libpyselinux.selinux_mkload_policy
selinux_init_load_policy = libpyselinux.selinux_init_load_policy
class SELboolean(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SELboolean, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SELboolean, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = libpyselinux.SELboolean_name_set
    __swig_getmethods__["name"] = libpyselinux.SELboolean_name_get
    if _newclass:name = _swig_property(libpyselinux.SELboolean_name_get, libpyselinux.SELboolean_name_set)
    __swig_setmethods__["value"] = libpyselinux.SELboolean_value_set
    __swig_getmethods__["value"] = libpyselinux.SELboolean_value_get
    if _newclass:value = _swig_property(libpyselinux.SELboolean_value_get, libpyselinux.SELboolean_value_set)
    def __init__(self, *args): 
        this = libpyselinux.new_SELboolean(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_SELboolean
    __del__ = lambda self : None;
SELboolean_swigregister = libpyselinux.SELboolean_swigregister
SELboolean_swigregister(SELboolean)

security_set_boolean_list = libpyselinux.security_set_boolean_list
security_load_booleans = libpyselinux.security_load_booleans
security_check_context = libpyselinux.security_check_context
security_check_context_raw = libpyselinux.security_check_context_raw
security_canonicalize_context = libpyselinux.security_canonicalize_context
security_canonicalize_context_raw = libpyselinux.security_canonicalize_context_raw
security_getenforce = libpyselinux.security_getenforce
security_setenforce = libpyselinux.security_setenforce
security_disable = libpyselinux.security_disable
security_policyvers = libpyselinux.security_policyvers
security_get_boolean_names = libpyselinux.security_get_boolean_names
security_get_boolean_pending = libpyselinux.security_get_boolean_pending
security_get_boolean_active = libpyselinux.security_get_boolean_active
security_set_boolean = libpyselinux.security_set_boolean
security_commit_booleans = libpyselinux.security_commit_booleans
class security_class_mapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, security_class_mapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, security_class_mapping, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = libpyselinux.security_class_mapping_name_set
    __swig_getmethods__["name"] = libpyselinux.security_class_mapping_name_get
    if _newclass:name = _swig_property(libpyselinux.security_class_mapping_name_get, libpyselinux.security_class_mapping_name_set)
    __swig_setmethods__["perms"] = libpyselinux.security_class_mapping_perms_set
    __swig_getmethods__["perms"] = libpyselinux.security_class_mapping_perms_get
    if _newclass:perms = _swig_property(libpyselinux.security_class_mapping_perms_get, libpyselinux.security_class_mapping_perms_set)
    def __init__(self, *args): 
        this = libpyselinux.new_security_class_mapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_security_class_mapping
    __del__ = lambda self : None;
security_class_mapping_swigregister = libpyselinux.security_class_mapping_swigregister
security_class_mapping_swigregister(security_class_mapping)

selinux_set_mapping = libpyselinux.selinux_set_mapping
string_to_security_class = libpyselinux.string_to_security_class
security_class_to_string = libpyselinux.security_class_to_string
security_av_perm_to_string = libpyselinux.security_av_perm_to_string
string_to_av_perm = libpyselinux.string_to_av_perm
security_av_string = libpyselinux.security_av_string
print_access_vector = libpyselinux.print_access_vector
MATCHPATHCON_BASEONLY = libpyselinux.MATCHPATHCON_BASEONLY
MATCHPATHCON_NOTRANS = libpyselinux.MATCHPATHCON_NOTRANS
MATCHPATHCON_VALIDATE = libpyselinux.MATCHPATHCON_VALIDATE
set_matchpathcon_flags = libpyselinux.set_matchpathcon_flags
matchpathcon_init = libpyselinux.matchpathcon_init
matchpathcon_init_prefix = libpyselinux.matchpathcon_init_prefix
matchpathcon_fini = libpyselinux.matchpathcon_fini
matchpathcon = libpyselinux.matchpathcon
matchpathcon_index = libpyselinux.matchpathcon_index
matchpathcon_filespec_add = libpyselinux.matchpathcon_filespec_add
matchpathcon_filespec_destroy = libpyselinux.matchpathcon_filespec_destroy
matchpathcon_filespec_eval = libpyselinux.matchpathcon_filespec_eval
matchpathcon_checkmatches = libpyselinux.matchpathcon_checkmatches
matchmediacon = libpyselinux.matchmediacon
selinux_getenforcemode = libpyselinux.selinux_getenforcemode
selinux_getpolicytype = libpyselinux.selinux_getpolicytype
selinux_policy_root = libpyselinux.selinux_policy_root
selinux_binary_policy_path = libpyselinux.selinux_binary_policy_path
selinux_failsafe_context_path = libpyselinux.selinux_failsafe_context_path
selinux_removable_context_path = libpyselinux.selinux_removable_context_path
selinux_default_context_path = libpyselinux.selinux_default_context_path
selinux_user_contexts_path = libpyselinux.selinux_user_contexts_path
selinux_file_context_path = libpyselinux.selinux_file_context_path
selinux_file_context_homedir_path = libpyselinux.selinux_file_context_homedir_path
selinux_file_context_local_path = libpyselinux.selinux_file_context_local_path
selinux_homedir_context_path = libpyselinux.selinux_homedir_context_path
selinux_media_context_path = libpyselinux.selinux_media_context_path
selinux_x_context_path = libpyselinux.selinux_x_context_path
selinux_contexts_path = libpyselinux.selinux_contexts_path
selinux_securetty_types_path = libpyselinux.selinux_securetty_types_path
selinux_booleans_path = libpyselinux.selinux_booleans_path
selinux_customizable_types_path = libpyselinux.selinux_customizable_types_path
selinux_users_path = libpyselinux.selinux_users_path
selinux_usersconf_path = libpyselinux.selinux_usersconf_path
selinux_translations_path = libpyselinux.selinux_translations_path
selinux_netfilter_context_path = libpyselinux.selinux_netfilter_context_path
selinux_path = libpyselinux.selinux_path
selinux_check_passwd_access = libpyselinux.selinux_check_passwd_access
checkPasswdAccess = libpyselinux.checkPasswdAccess
selinux_check_securetty_context = libpyselinux.selinux_check_securetty_context
set_selinuxmnt = libpyselinux.set_selinuxmnt
rpm_execcon = libpyselinux.rpm_execcon
is_context_customizable = libpyselinux.is_context_customizable
selinux_trans_to_raw_context = libpyselinux.selinux_trans_to_raw_context
selinux_raw_to_trans_context = libpyselinux.selinux_raw_to_trans_context
getseuserbyname = libpyselinux.getseuserbyname
selinux_file_context_cmp = libpyselinux.selinux_file_context_cmp
selinux_file_context_verify = libpyselinux.selinux_file_context_verify
selinux_lsetfilecon_default = libpyselinux.selinux_lsetfilecon_default
class security_id(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, security_id, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, security_id, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctx"] = libpyselinux.security_id_ctx_set
    __swig_getmethods__["ctx"] = libpyselinux.security_id_ctx_get
    if _newclass:ctx = _swig_property(libpyselinux.security_id_ctx_get, libpyselinux.security_id_ctx_set)
    __swig_setmethods__["refcnt"] = libpyselinux.security_id_refcnt_set
    __swig_getmethods__["refcnt"] = libpyselinux.security_id_refcnt_get
    if _newclass:refcnt = _swig_property(libpyselinux.security_id_refcnt_get, libpyselinux.security_id_refcnt_set)
    def __init__(self, *args): 
        this = libpyselinux.new_security_id(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_security_id
    __del__ = lambda self : None;
security_id_swigregister = libpyselinux.security_id_swigregister
security_id_swigregister(security_id)

avc_sid_to_context = libpyselinux.avc_sid_to_context
avc_sid_to_context_raw = libpyselinux.avc_sid_to_context_raw
avc_context_to_sid = libpyselinux.avc_context_to_sid
avc_context_to_sid_raw = libpyselinux.avc_context_to_sid_raw
sidget = libpyselinux.sidget
sidput = libpyselinux.sidput
avc_get_initial_sid = libpyselinux.avc_get_initial_sid
class avc_entry_ref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avc_entry_ref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avc_entry_ref, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ae"] = libpyselinux.avc_entry_ref_ae_set
    __swig_getmethods__["ae"] = libpyselinux.avc_entry_ref_ae_get
    if _newclass:ae = _swig_property(libpyselinux.avc_entry_ref_ae_get, libpyselinux.avc_entry_ref_ae_set)
    def __init__(self, *args): 
        this = libpyselinux.new_avc_entry_ref(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_avc_entry_ref
    __del__ = lambda self : None;
avc_entry_ref_swigregister = libpyselinux.avc_entry_ref_swigregister
avc_entry_ref_swigregister(avc_entry_ref)

class avc_memory_callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avc_memory_callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avc_memory_callback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func_malloc"] = libpyselinux.avc_memory_callback_func_malloc_set
    __swig_getmethods__["func_malloc"] = libpyselinux.avc_memory_callback_func_malloc_get
    if _newclass:func_malloc = _swig_property(libpyselinux.avc_memory_callback_func_malloc_get, libpyselinux.avc_memory_callback_func_malloc_set)
    __swig_setmethods__["func_free"] = libpyselinux.avc_memory_callback_func_free_set
    __swig_getmethods__["func_free"] = libpyselinux.avc_memory_callback_func_free_get
    if _newclass:func_free = _swig_property(libpyselinux.avc_memory_callback_func_free_get, libpyselinux.avc_memory_callback_func_free_set)
    def __init__(self, *args): 
        this = libpyselinux.new_avc_memory_callback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_avc_memory_callback
    __del__ = lambda self : None;
avc_memory_callback_swigregister = libpyselinux.avc_memory_callback_swigregister
avc_memory_callback_swigregister(avc_memory_callback)

class avc_log_callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avc_log_callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avc_log_callback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func_log"] = libpyselinux.avc_log_callback_func_log_set
    __swig_getmethods__["func_log"] = libpyselinux.avc_log_callback_func_log_get
    if _newclass:func_log = _swig_property(libpyselinux.avc_log_callback_func_log_get, libpyselinux.avc_log_callback_func_log_set)
    __swig_setmethods__["func_audit"] = libpyselinux.avc_log_callback_func_audit_set
    __swig_getmethods__["func_audit"] = libpyselinux.avc_log_callback_func_audit_get
    if _newclass:func_audit = _swig_property(libpyselinux.avc_log_callback_func_audit_get, libpyselinux.avc_log_callback_func_audit_set)
    def __init__(self, *args): 
        this = libpyselinux.new_avc_log_callback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_avc_log_callback
    __del__ = lambda self : None;
avc_log_callback_swigregister = libpyselinux.avc_log_callback_swigregister
avc_log_callback_swigregister(avc_log_callback)

class avc_thread_callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avc_thread_callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avc_thread_callback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func_create_thread"] = libpyselinux.avc_thread_callback_func_create_thread_set
    __swig_getmethods__["func_create_thread"] = libpyselinux.avc_thread_callback_func_create_thread_get
    if _newclass:func_create_thread = _swig_property(libpyselinux.avc_thread_callback_func_create_thread_get, libpyselinux.avc_thread_callback_func_create_thread_set)
    __swig_setmethods__["func_stop_thread"] = libpyselinux.avc_thread_callback_func_stop_thread_set
    __swig_getmethods__["func_stop_thread"] = libpyselinux.avc_thread_callback_func_stop_thread_get
    if _newclass:func_stop_thread = _swig_property(libpyselinux.avc_thread_callback_func_stop_thread_get, libpyselinux.avc_thread_callback_func_stop_thread_set)
    def __init__(self, *args): 
        this = libpyselinux.new_avc_thread_callback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_avc_thread_callback
    __del__ = lambda self : None;
avc_thread_callback_swigregister = libpyselinux.avc_thread_callback_swigregister
avc_thread_callback_swigregister(avc_thread_callback)

class avc_lock_callback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avc_lock_callback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avc_lock_callback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["func_alloc_lock"] = libpyselinux.avc_lock_callback_func_alloc_lock_set
    __swig_getmethods__["func_alloc_lock"] = libpyselinux.avc_lock_callback_func_alloc_lock_get
    if _newclass:func_alloc_lock = _swig_property(libpyselinux.avc_lock_callback_func_alloc_lock_get, libpyselinux.avc_lock_callback_func_alloc_lock_set)
    __swig_setmethods__["func_get_lock"] = libpyselinux.avc_lock_callback_func_get_lock_set
    __swig_getmethods__["func_get_lock"] = libpyselinux.avc_lock_callback_func_get_lock_get
    if _newclass:func_get_lock = _swig_property(libpyselinux.avc_lock_callback_func_get_lock_get, libpyselinux.avc_lock_callback_func_get_lock_set)
    __swig_setmethods__["func_release_lock"] = libpyselinux.avc_lock_callback_func_release_lock_set
    __swig_getmethods__["func_release_lock"] = libpyselinux.avc_lock_callback_func_release_lock_get
    if _newclass:func_release_lock = _swig_property(libpyselinux.avc_lock_callback_func_release_lock_get, libpyselinux.avc_lock_callback_func_release_lock_set)
    __swig_setmethods__["func_free_lock"] = libpyselinux.avc_lock_callback_func_free_lock_set
    __swig_getmethods__["func_free_lock"] = libpyselinux.avc_lock_callback_func_free_lock_get
    if _newclass:func_free_lock = _swig_property(libpyselinux.avc_lock_callback_func_free_lock_get, libpyselinux.avc_lock_callback_func_free_lock_set)
    def __init__(self, *args): 
        this = libpyselinux.new_avc_lock_callback(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_avc_lock_callback
    __del__ = lambda self : None;
avc_lock_callback_swigregister = libpyselinux.avc_lock_callback_swigregister
avc_lock_callback_swigregister(avc_lock_callback)

AVC_OPT_UNUSED = libpyselinux.AVC_OPT_UNUSED
AVC_OPT_SETENFORCE = libpyselinux.AVC_OPT_SETENFORCE
avc_init = libpyselinux.avc_init
avc_open = libpyselinux.avc_open
avc_cleanup = libpyselinux.avc_cleanup
avc_reset = libpyselinux.avc_reset
avc_destroy = libpyselinux.avc_destroy
avc_has_perm_noaudit = libpyselinux.avc_has_perm_noaudit
avc_has_perm = libpyselinux.avc_has_perm
avc_audit = libpyselinux.avc_audit
avc_compute_create = libpyselinux.avc_compute_create
avc_compute_member = libpyselinux.avc_compute_member
AVC_CALLBACK_GRANT = libpyselinux.AVC_CALLBACK_GRANT
AVC_CALLBACK_TRY_REVOKE = libpyselinux.AVC_CALLBACK_TRY_REVOKE
AVC_CALLBACK_REVOKE = libpyselinux.AVC_CALLBACK_REVOKE
AVC_CALLBACK_RESET = libpyselinux.AVC_CALLBACK_RESET
AVC_CALLBACK_AUDITALLOW_ENABLE = libpyselinux.AVC_CALLBACK_AUDITALLOW_ENABLE
AVC_CALLBACK_AUDITALLOW_DISABLE = libpyselinux.AVC_CALLBACK_AUDITALLOW_DISABLE
AVC_CALLBACK_AUDITDENY_ENABLE = libpyselinux.AVC_CALLBACK_AUDITDENY_ENABLE
AVC_CALLBACK_AUDITDENY_DISABLE = libpyselinux.AVC_CALLBACK_AUDITDENY_DISABLE
AVC_CACHE_STATS = libpyselinux.AVC_CACHE_STATS
class avc_cache_stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, avc_cache_stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, avc_cache_stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["entry_lookups"] = libpyselinux.avc_cache_stats_entry_lookups_set
    __swig_getmethods__["entry_lookups"] = libpyselinux.avc_cache_stats_entry_lookups_get
    if _newclass:entry_lookups = _swig_property(libpyselinux.avc_cache_stats_entry_lookups_get, libpyselinux.avc_cache_stats_entry_lookups_set)
    __swig_setmethods__["entry_hits"] = libpyselinux.avc_cache_stats_entry_hits_set
    __swig_getmethods__["entry_hits"] = libpyselinux.avc_cache_stats_entry_hits_get
    if _newclass:entry_hits = _swig_property(libpyselinux.avc_cache_stats_entry_hits_get, libpyselinux.avc_cache_stats_entry_hits_set)
    __swig_setmethods__["entry_misses"] = libpyselinux.avc_cache_stats_entry_misses_set
    __swig_getmethods__["entry_misses"] = libpyselinux.avc_cache_stats_entry_misses_get
    if _newclass:entry_misses = _swig_property(libpyselinux.avc_cache_stats_entry_misses_get, libpyselinux.avc_cache_stats_entry_misses_set)
    __swig_setmethods__["entry_discards"] = libpyselinux.avc_cache_stats_entry_discards_set
    __swig_getmethods__["entry_discards"] = libpyselinux.avc_cache_stats_entry_discards_get
    if _newclass:entry_discards = _swig_property(libpyselinux.avc_cache_stats_entry_discards_get, libpyselinux.avc_cache_stats_entry_discards_set)
    __swig_setmethods__["cav_lookups"] = libpyselinux.avc_cache_stats_cav_lookups_set
    __swig_getmethods__["cav_lookups"] = libpyselinux.avc_cache_stats_cav_lookups_get
    if _newclass:cav_lookups = _swig_property(libpyselinux.avc_cache_stats_cav_lookups_get, libpyselinux.avc_cache_stats_cav_lookups_set)
    __swig_setmethods__["cav_hits"] = libpyselinux.avc_cache_stats_cav_hits_set
    __swig_getmethods__["cav_hits"] = libpyselinux.avc_cache_stats_cav_hits_get
    if _newclass:cav_hits = _swig_property(libpyselinux.avc_cache_stats_cav_hits_get, libpyselinux.avc_cache_stats_cav_hits_set)
    __swig_setmethods__["cav_probes"] = libpyselinux.avc_cache_stats_cav_probes_set
    __swig_getmethods__["cav_probes"] = libpyselinux.avc_cache_stats_cav_probes_get
    if _newclass:cav_probes = _swig_property(libpyselinux.avc_cache_stats_cav_probes_get, libpyselinux.avc_cache_stats_cav_probes_set)
    __swig_setmethods__["cav_misses"] = libpyselinux.avc_cache_stats_cav_misses_set
    __swig_getmethods__["cav_misses"] = libpyselinux.avc_cache_stats_cav_misses_get
    if _newclass:cav_misses = _swig_property(libpyselinux.avc_cache_stats_cav_misses_get, libpyselinux.avc_cache_stats_cav_misses_set)
    def __init__(self, *args): 
        this = libpyselinux.new_avc_cache_stats(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = libpyselinux.delete_avc_cache_stats
    __del__ = lambda self : None;
avc_cache_stats_swigregister = libpyselinux.avc_cache_stats_swigregister
avc_cache_stats_swigregister(avc_cache_stats)

avc_av_stats = libpyselinux.avc_av_stats
avc_sid_stats = libpyselinux.avc_sid_stats
selinux_default_type_path = libpyselinux.selinux_default_type_path
get_default_type = libpyselinux.get_default_type
SELINUX_DEFAULTUSER = libpyselinux.SELINUX_DEFAULTUSER
get_ordered_context_list = libpyselinux.get_ordered_context_list
get_ordered_context_list_with_level = libpyselinux.get_ordered_context_list_with_level
get_default_context = libpyselinux.get_default_context
get_default_context_with_level = libpyselinux.get_default_context_with_level
get_default_context_with_role = libpyselinux.get_default_context_with_role
get_default_context_with_rolelevel = libpyselinux.get_default_context_with_rolelevel
query_user_context = libpyselinux.query_user_context
manual_user_enter_context = libpyselinux.manual_user_enter_context


